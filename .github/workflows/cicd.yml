name: CI/CD para EC2 p√∫blica e privada

on:
  push:
    branches:
      - main # O branch que acionar√° o deploy

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout do c√≥digo
      - name: Checkout do Reposit√≥rio
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configura√ß√£o do ambiente Node.js
      - name: FE - Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3Ô∏è‚É£ Apenas para debug (mostra o diret√≥rio atual)
      - name: Verificar diret√≥rio atual
        run: |
          pwd
          ls -R

      # 4Ô∏è‚É£ Build da aplica√ß√£o (caso seja um app React/Vite)
      - name: FE - Instalar Depend√™ncias e Fazer Build
        run: |
          npm install
          npm run build --if-present
        working-directory: Frontend-projetoMima/projeto-MimaStore

      # 5Ô∏è‚É£ Copiar arquivos para o EC2 (deploy com rsync via SSH)
      - name: FE - Copiar arquivos e Deploy (Usando SSH com rsync)
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: /home/${{ secrets.REMOTE_USER }}
          ARGS: "-rltgoDzvO --delete"
          SOURCE: "Frontend-projetoMima/projeto-MimaStore/"

      # 6Ô∏è‚É£ P√≥s-deploy ‚Äî configurar Docker e rodar o container automaticamente
      - name: FE - Configurar Docker e rodar container no EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "üöÄ Iniciando configura√ß√£o do Docker..."

            # Garante que o Docker est√° instalado e ativo
            sudo systemctl enable docker
            sudo systemctl start docker

            # Adiciona o usu√°rio ec2-user ao grupo docker (permite rodar docker sem sudo)
            sudo usermod -aG docker ec2-user

            # Recarrega permiss√µes (s√≥ √© efetivo em login, mas previne erros futuros)
            newgrp docker <<EONG
            cd /home/${{ secrets.REMOTE_USER }}

            # Para e remove o container antigo, se existir
            docker stop mimastore || true
            docker rm mimastore || true

            # Faz build da imagem e sobe o container
            docker build -t mimastore-frontend .
            docker run -d -p 80:80 --name mimastore mimastore-frontend
            EONG

            echo "‚úÖ Deploy finalizado e container em execu√ß√£o!"
